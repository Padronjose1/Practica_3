#Practica 3
#Padrón Hernández José Domingo 
class Nodo:
    """ Nodo del trie con diccionario de hijos indicador de fin de la palabra y letra asociada"""
    def __init__(self):
        self.hijos = {}  #Diccionario para almacenar referencias a nodos hijos
        
        self.es_final = False  #Indica si es final de palabra
        self.letra = None  #almacena la letra en el nodo final

class Trie:
    """Estructura Trie para manejar la insertacion codificacion y decodificacion de letras con codigos binarios """
    def __init__(self):
        self.raiz = Nodo() #Nodo raiz del trie

    def insertar(self, letra, codigo_binario):
        """ Inserta una letra con su respectivo codigo binario en el trie"""
        nodo_actual = self.raiz
        
        for bit in codigo_binario:  #recorre cada bit 
            if bit not in nodo_actual.hijos:
                nodo_actual.hijos[bit] = Nodo()  #Crea un nuevo nodo si el bit no existe
            nodo_actual = nodo_actual.hijos[bit]  #avanza al nodo correspondiente al bit
        
        nodo_actual.es_final = True  #Marca el ultimo nodo como final de palabra
        
        nodo_actual.letra = letra  #almacena la letra en el nodo final

    def codificar(self, palabra):
        """Programa una palabra usando los códigos binarios almacenados en el trie."""
        resultado = ""
        
        for letra in palabra:  # Recorre cada letra de la palabra
            codigo = self._buscar_codigo(self.raiz, letra)  # Busca el código para la letra
            if codigo is None:
                # En lugar de lanzar una excepción, añadimos un mensaje de error en el resultado
                resultado += f"Error: La letra '{letra}' no encontrada."
            else:
                resultado += codigo  # Añade el código encontrado al resultado final
        
        return resultado


    def _buscar_codigo(self, nodo, letra_buscada, ruta=""):
        """metodo recursivo para buscar el codigo binario de una letra especifica """
        if nodo.es_final and nodo.letra == letra_buscada:
            return ruta  #retorna la ruta acumulada si encuentra la letra
        
        for bit, hijo in nodo.hijos.items():  #Explora los hijos del nodo actual
            resultado = self._buscar_codigo(hijo, letra_buscada, ruta + bit)  #recursividad con ruta actualizada
            if resultado:
                return resultado  #retorna el resultado si se encuentra
        return None  #retorna None si no se encuentra la letra

    def decodificar(self, secuencia):
        """Saca una secuencia binaria usando el trie para obtener la palabra original"""
        resultado = ""
        nodo_actual = self.raiz
        
        for bit in secuencia:  #recorre cada bit de la secuencia
            if bit not in nodo_actual.hijos:
                raise Exception("Secuencia binaria invalida")  #Lanza excepcion si el bit no conduce a un nodo hijo
            nodo_actual = nodo_actual.hijos[bit]  #avanza al nodo hijo correspondiente
            if nodo_actual.es_final:
                resultado += nodo_actual.letra  #añade la letra al resultado
                nodo_actual = self.raiz  #restablece al nodo raiz para la siguiente letra
        
        return resultado  #retorna la palabra decodificada

#Ejemplo de uso
trie = Trie()

trie.insertar("A", "000")
trie.insertar("B", "001")
trie.insertar("C", "10")
trie.insertar("D", "11")
trie.insertar("R", "01")

codificado = trie.codificar('ABRACADABRA')

if "error" not in codificado:
    print("codificado:", codificado)
    decodificado = trie.decodificar(codificado)
    if "invalido" not in decodificado:
        print("decodificado:", decodificado)
    else:
        print(decodificado)
else:
    print(codificado)

trie = Trie()

diccionario = {
    ' ': '01',
    ',': '10000110',
    '.': '1010001',
    'a': '1001',
    'b': '00001010',
    'c': '1000001',
    'd': '101010',
    'e': '11',
    'f': '10000100',
    'g': '00001001',
    'h': '101001',
    'i': '00010',
    'j': '10000001',
    'k': '10000000',
    'l': '101011',
    'm': '1010000',
    'n': '00000',
    'ñ': '10000101',
    'o': '1011',
    'p': '00001011',
    'q': '00001110',
    'r': '10001',
    's': '00011',
    't': '001',
    'u': '0000110',
    'v': '00001111',
    'y': '00001000',
    'z': '10000111'
}

for letra, codigo in diccionario.items():
    trie.insertar(letra, codigo)



with open("Mensaje.txt", "r") as file:
    codigo1 = file.read().strip()  


texto = trie.decodificar(codigo1)
print("decodificado:")

print(texto)
